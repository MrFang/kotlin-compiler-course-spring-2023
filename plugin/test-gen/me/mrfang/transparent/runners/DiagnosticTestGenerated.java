

package me.mrfang.transparent.runners;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link me.mrfang.transparent.GenerateTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("testData/diagnostics")
@TestDataPath("$PROJECT_ROOT")
public class DiagnosticTestGenerated extends AbstractDiagnosticTest {
    @Test
    public void testAllFilesPresentInDiagnostics() throws Exception {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("testData/diagnostics"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("class-with-type-args.kt")
    public void testClass_with_type_args() throws Exception {
        runTest("testData/diagnostics/class-with-type-args.kt");
    }

    @Test
    @TestMetadata("methods-with-type-args.kt")
    public void testMethods_with_type_args() throws Exception {
        runTest("testData/diagnostics/methods-with-type-args.kt");
    }

    @Test
    @TestMetadata("simple.kt")
    public void testSimple() throws Exception {
        runTest("testData/diagnostics/simple.kt");
    }

    @Test
    @TestMetadata("transparent-class-with-type-args.kt")
    public void testTransparent_class_with_type_args() throws Exception {
        runTest("testData/diagnostics/transparent-class-with-type-args.kt");
    }

    @Test
    @TestMetadata("transparent-specific-methods.kt")
    public void testTransparent_specific_methods() throws Exception {
        runTest("testData/diagnostics/transparent-specific-methods.kt");
    }

    @Nested
    @TestMetadata("testData/diagnostics/errors")
    @TestDataPath("$PROJECT_ROOT")
    public class Errors {
        @Test
        public void testAllFilesPresentInErrors() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("testData/diagnostics/errors"), Pattern.compile("^(.+)\\.kt$"), null, true);
        }

        @Test
        @TestMetadata("transparent-no-inline.kt")
        public void testTransparent_no_inline() throws Exception {
            runTest("testData/diagnostics/errors/transparent-no-inline.kt");
        }

        @Test
        @TestMetadata("transparent-nullable-property.kt")
        public void testTransparent_nullable_property() throws Exception {
            runTest("testData/diagnostics/errors/transparent-nullable-property.kt");
        }
    }
}
